@page "/addstudentcourse"
@using BlazorApp.Model
@using Microsoft.EntityFrameworkCore
@inject BlazorApp.Data.MyDBContext DB
@inject NavigationManager NavManager
@rendermode InteractiveServer

<h3>Add Student to Course</h3>

@if (studentList==null || courseList== null )
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="this" FormName="selectcourseStudnt" OnValidSubmit="HandleValidSubmit" Enhance>
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="col-3">
            Student:
            <InputSelect @bind-Value="selectStudentId" class="form-select form-select-sm">
                <option>Select Student</option>
                @foreach (var item in studentList)
                {
                    <option value="@item.StudentId">@item.Name</option>
                }
            </InputSelect>            
        </div>

        <div class="col-3">
        Course:
        <InputSelect @bind-Value="selectCourseId" class="form-select form-select-sm">
            <option>Select Course</option>
            @foreach (var item in courseList)
            {
                <option value="@item.CourseId">@item.CourseName</option>
            }
        </InputSelect>       
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>            
    <p class="text-danger">@errorMessage</p>
}
@code {
    private List<Student> studentList;
    private List<Course> courseList;

    private int? selectStudentId { get; set; }
    private int? selectCourseId { get; set; }

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        studentList = await DB.students.ToListAsync();
        courseList = await DB.courses.ToListAsync();
    }

    private async Task HandleValidSubmit()
    {
        var student = await DB.students.FirstOrDefaultAsync(s => s.StudentId == selectStudentId);
        var course = await DB.courses.FirstOrDefaultAsync(s => s.CourseId == selectCourseId);
        if (student != null && course != null)
        {
            if (student.Courses.Any(c=>c.CourseId==selectCourseId))
            {
                errorMessage = "This Student is already enrolled to this Course!";
            }
            else
            {
                student.Courses.Add(course);
                await DB.SaveChangesAsync();
                NavManager.NavigateTo("studentcourse");
            }

        }
    }
}
